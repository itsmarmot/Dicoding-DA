# -*- coding: utf-8 -*-
"""dashboard.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zPSAcX7Pi9wZAll40PlcuVve5YqSnxXP
"""

!pip install streamlit
!pip install pandas
!pip install matplotlib
!pip install seaborn

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st

# Set the style for the plots
sns.set(style='dark')

# Helper functions for data preparation and visualization

def create_hourly_avg_df(df):
    hourly_avg_df = df.groupby('hour').agg({
        'PM2.5': 'mean',
        'PM10': 'mean',
        'SO2': 'mean',
        'NO2': 'mean',
        'CO': 'mean',
        'O3': 'mean',
        'TEMP': 'mean',
    }).reset_index()
    return hourly_avg_df

def create_monthly_avg_df(df):
    monthly_avg_df = df.groupby('month').agg({
        'PM2.5': 'mean',
        'PM10': 'mean',
        'SO2': 'mean',
        'NO2': 'mean',
        'CO': 'mean',
        'O3': 'mean',
        'TEMP': 'mean',
    }).reset_index()
    return monthly_avg_df

def create_yearly_avg_df(df):
    yearly_avg_df = df.groupby('year').agg({
        'PM2.5': 'mean',
        'PM10': 'mean',
        'SO2': 'mean',
        'NO2': 'mean',
        'CO': 'mean',
        'O3': 'mean',
        'TEMP': 'mean',
    }).reset_index()
    return yearly_avg_df

# Load the data
@st.cache_data
def load_data():
    df = pd.read_csv("air_quality_data.csv")
    df['datetime'] = pd.to_datetime(df[['year', 'month', 'day', 'hour']])
    return df

df = load_data()

# Sidebar for date range selection
st.sidebar.header("Filter Data")
min_date = df['datetime'].min().date()
max_date = df['datetime'].max().date()

start_date, end_date = st.sidebar.date_input(
    label='Date Range',
    min_value=min_date,
    max_value=max_date,
    value=[min_date, max_date]
)

# Filter data based on date range
filtered_df = df[(df['datetime'].dt.date >= start_date) & (df['datetime'].dt.date <= end_date)]

# Main dashboard
st.title("Air Quality Dashboard")

# Overview metrics
st.header("Overview")
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric("Average PM2.5", f"{filtered_df['PM2.5'].mean():.2f}")
with col2:
    st.metric("Average PM10", f"{filtered_df['PM10'].mean():.2f}")
with col3:
    st.metric("Average Temperature", f"{filtered_df['TEMP'].mean():.2f}Â°C")
with col4:
    st.metric("Most Common Wind Direction", filtered_df['wd'].mode().values[0])

# Hourly trends
st.header("Hourly Trends")
hourly_avg_df = create_hourly_avg_df(filtered_df)

fig, ax = plt.subplots(figsize=(12, 6))
ax.plot(hourly_avg_df['hour'], hourly_avg_df['PM2.5'], label='PM2.5')
ax.plot(hourly_avg_df['hour'], hourly_avg_df['PM10'], label='PM10')
ax.set_xlabel("Hour")
ax.set_ylabel("Concentration")
ax.set_title("Hourly Average PM2.5 and PM10")
ax.legend()
st.pyplot(fig)

# Monthly trends
st.header("Monthly Trends")
monthly_avg_df = create_monthly_avg_df(filtered_df)

fig, ax = plt.subplots(figsize=(12, 6))
sns.barplot(x='month', y='TEMP', data=monthly_avg_df, ax=ax)
ax.set_xlabel("Month")
ax.set_ylabel("Temperature (Â°C)")
ax.set_title("Monthly Average Temperature")
st.pyplot(fig)

# Yearly trends
st.header("Yearly Trends")
yearly_avg_df = create_yearly_avg_df(filtered_df)

fig, ax = plt.subplots(figsize=(12, 6))
sns.lineplot(x='year', y='CO', data=yearly_avg_df, ax=ax)
ax.set_xlabel("Year")
ax.set_ylabel("CO Concentration")
ax.set_title("Yearly Average CO Concentration")
st.pyplot(fig)

# Correlation heatmap
st.header("Correlation Between Pollutants")
corr_columns = ['PM2.5', 'PM10', 'SO2', 'NO2', 'CO', 'O3', 'TEMP']
corr_matrix = filtered_df[corr_columns].corr()

fig, ax = plt.subplots(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', ax=ax)
ax.set_title("Correlation Heatmap")
st.pyplot(fig)

# Wind rose (simple version)
st.header("Wind Rose")
wind_data = filtered_df['wd'].value_counts().sort_index()

fig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(projection='polar'))
ax.bar(wind_data.index * 2 * 3.14159 / 360, wind_data.values, width=0.5)
ax.set_theta_zero_location('N')
ax.set_theta_direction(-1)
ax.set_thetagrids(range(0, 360, 45), ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'])
ax.set_title("Wind Direction Distribution")
st.pyplot(fig)

st.caption('Air Quality Dashboard - Created with Streamlit')